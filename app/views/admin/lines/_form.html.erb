<div class="row">
<%= form_for([:admin, line]) do |f| %>
  <% if line.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(line.errors.count, "error") %> prohibited this line from being saved:</h2>

      <ul>
        <% line.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="col-md-6">
    <!-- Default box -->
    <div class="box box-solid">
      <div class="box-header">
        <h3 class="box-title"><%= t(:details) %></h3>
      </div>
      <div class="box-body">
        <div class="form-group">
          <%= f.label :name, t(:name) %>
          <%= f.text_field :name, class: 'form-control' %>
        </div>
        <div class="form-group">
          <%= f.label :description, t(:description) %>
          <%= f.text_area :description, class: 'form-control' %>
        </div>
        <%= f.text_area :path, hidden: true %>
        <div class="checkbox">
          <%= f.label :is_active do %>
            <%= f.check_box :is_active %>
            <%= t(:is_active) %>
          <% end %>
        </div>
        <div class="form-group">
          <%= f.label :category, t(:category) %>
          <%= f.select(:category_id, Category.all.where(:variety => 'LIN').collect {|c| [ c.name, c.id ] }, { include_blank: true }, class: 'form-control') %>
        </div>
      </div><!-- /.box-body -->
    </div><!-- /.box -->
  </div>
  <div class="col-md-6">
    <!-- Default box -->
    <div class="box box-solid">
      <div class="box-body">
        <div id="map-canvas" style="height:480px; width:auto"></div>
      </div><!-- /.box-body -->
    </div><!-- /.box -->
  </div>
</div>


<%= display_button_bar(line, [:admin]) %>
<% end %>

<script type="text/javascript">

if (!google.maps.Polyline.prototype.getBounds)
  google.maps.Polyline.prototype.getBounds = function() {
       
        var bounds = new google.maps.LatLngBounds();
        
        this.getPath().forEach( function(latlng) { bounds.extend(latlng); } ); 
       
        return bounds; 
       
  }

var waiting_for_first_point = <%= line.new_record? %>;
var first_point = null;

var waiting_for_last_point = <%= line.new_record? %>;
var last_point = null;

var polyline = null;


function initialize() {


  var mapOptions = {
    center: new google.maps.LatLng(0, 0),
    zoom: 1
  };

  var map = new google.maps.Map(document.getElementById("map-canvas"),
      mapOptions);

  <% if not line.new_record? then %>


      var path = [];

  var str_path = "<%= path_to_s(line.path) %>";

  $.parseJSON(str_path).forEach(function(elt, idx) {
    path.push(new google.maps.LatLng(elt[0], elt[1]));
  });

  polyline = new google.maps.Polyline({
    map: map,
    path: path
  });

  polyline.edit(true, {
    css: "/src/css/"
  });

  map.fitBounds(polyline.getBounds());

  var update_line_points_input = function() {

    var coords = [];
    polyline.getPath().forEach(function(elt, idx) {
      coords.push(elt.lng() + ' ' + elt.lat());
    });

    $('#line_path').val("LINESTRING("+coords.join(",")+")");
  }

  google.maps.event.addListener(polyline, 'update_at', update_line_points_input);
  google.maps.event.addListener(polyline, 'insert_at', update_line_points_input);
  google.maps.event.addListener(polyline, 'remove_at', update_line_points_input);

  update_line_points_input();

<% end %>

  google.maps.event.addListener(map, 'click', function(evt) {

    if (waiting_for_first_point) {

      first_point = evt.latLng;
      waiting_for_first_point = false;

      console.log("Got first point");

      return;
    }	

    if (waiting_for_last_point) {

      last_point = evt.latLng;
      waiting_for_last_point = false;

      console.log("Got last point");

      polyline = new google.maps.Polyline({
        map: map,
        path: [
          first_point,
          last_point
        ]
      });

      polyline.edit(true, {
        css: "/src/css/"
      });

      var update_line_points_input = function() {

        var coords = [];

        polyline.getPath().forEach(function(elt, idx) {
          coords.push(elt.lng() + ' ' + elt.lat());
        });

        $('#line_path').val("LINESTRING("+coords.join(",")+")");
      }

      google.maps.event.addListener(polyline, 'update_at', update_line_points_input);
      google.maps.event.addListener(polyline, 'insert_at', update_line_points_input);
      google.maps.event.addListener(polyline, 'remove_at', update_line_points_input);

      update_line_points_input();

      return;
    }

  });


}


google.maps.event.addDomListener(window, 'load', initialize);

//TODO remove
google.maps.geometry = null;

</script>

