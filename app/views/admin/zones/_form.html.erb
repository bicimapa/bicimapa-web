<div class="row">
<%= simple_form_for([:admin, zone]) do |f| %>
  <% if zone.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(zone.errors.count, "error") %> prohibited this zone from being saved:</h2>

      <ul>
        <% zone.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="col-md-6">
    <!-- Default box -->
    <div class="box box-solid">
      <div class="box-header">
        <h3 class="box-title"><%= t(:details) %></h3>
      </div>
      <div class="box-body">
        <div class="form-group">
          <%= f.input :name, label: t(:name), input_html: { class: 'form-control' } %>
        </div>
        <div class="form-group">
          <%= f.input :description, label: t(:description ), input_html: { class: 'form-control' } %>
        </div>
        <div class="form-group">
          <%= f.input :polygon, as: :hidden %>
        </div>
        <div class="form-group">
          <%= f.association :moderators, collection: User.where(is_moderator: true).order('last_name, first_name').all, label_method: :full_name, value_method: :id, include_blank: false, input_html: { class: 'form-control' } %>
        </div>
      </div><!-- /.box-body -->
    </div><!-- /.box -->
  </div>

<div class="col-md-6">
  <!-- Default box -->
  <div class="box box-solid">
    <div class="box-body">
      <div id="map-canvas" style="height:480px; width:auto"></div>
    </div><!-- /.box-body -->
  </div><!-- /.box -->
</div>

</div>


<%= display_button_bar(zone, [:admin]) %>
<% end %>

<script type="text/javascript">

if (!google.maps.Polyline.prototype.getBounds)
  google.maps.Polyline.prototype.getBounds = function() {
       
        var bounds = new google.maps.LatLngBounds();
        
        this.getPath().forEach( function(latlng) { bounds.extend(latlng); } ); 
       
        return bounds; 
       
  }

var waiting_for_first_point = <%= zone.new_record? %>;
var first_point = null;

var waiting_for_mid_point = <%= zone.new_record? %>;
var mid_point= null;

var waiting_for_last_point = <%= zone.new_record? %>;
var last_point = null;

var polyline = null;


function initialize() {

  var mapOptions = {
    center: new google.maps.LatLng(0, 0),
    zoom: 1
  };

  var map = new google.maps.Map(document.getElementById("map-canvas"),
      mapOptions);

  <% if not zone.new_record? then %>


      var path = [];

  var str_path = "<%= polygon_to_s(zone.polygon) %>";

  $.parseJSON(str_path).forEach(function(elt, idx) {
    path.push(new google.maps.LatLng(elt[0], elt[1]));
  });

  polyline = new google.maps.Polyline({
    map: map,
    path: path
  });

  map.fitBounds(polyline.getBounds());

  polyline.edit(true,
      {fill: true, close: true}
      );

  var update_zone_points_input = function() {

    var coords = [];

    polyline.getPath().forEach(function(elt, idx) {
      coords.push(elt.lng() + ' ' + elt.lat());
    });
    coords.push(polyline.getPath().getArray()[0].lng() + ' ' + polyline.getPath().getArray()[0].lat());

    $('#zone_polygon').val(("POLYGON(("+coords.join(",")+"))"));
  }

  google.maps.event.addListener(polyline, 'update_at', update_zone_points_input);
  google.maps.event.addListener(polyline, 'insert_at', update_zone_points_input);
  google.maps.event.addListener(polyline, 'remove_at', update_zone_points_input);

  update_zone_points_input();

<% end %>

  google.maps.event.addListener(map, 'click', function(evt) {

    if (waiting_for_first_point) {

      first_point = evt.latLng;
      waiting_for_first_point = false;

      console.log("Got first point");

      return;
    }	

    if (waiting_for_mid_point) {

      mid_point = evt.latLng;
      waiting_for_mid_point = false;

      console.log("Got mid point");

      return;
    }	

    if (waiting_for_last_point) {

      last_point = evt.latLng;
      waiting_for_last_point = false;

      console.log("Got last point");

      polyline = new google.maps.Polyline({
        map: map,
        path: [
          first_point,
          mid_point,
          last_point
        ]
      });

      polyline.edit(true, 
          {fill: true, close: true}
          );

      var update_zone_points_input = function() {

        var coords = [];

        polyline.getPath().forEach(function(elt, idx) {
          coords.push(elt.lng() + ' ' + elt.lat());
        });
        coords.push(polyline.getPath().getArray()[0].lng() + ' ' + polyline.getPath().getArray()[0].lat());

        $('#zone_polygon').val(("POLYGON(("+coords.join(",")+"))"));
      }

      google.maps.event.addListener(polyline, 'update_at', update_zone_points_input);
      google.maps.event.addListener(polyline, 'insert_at', update_zone_points_input);
      google.maps.event.addListener(polyline, 'remove_at', update_zone_points_input);

      update_zone_points_input();

      return;
    }

  });


}


google.maps.event.addDomListener(window, 'load', initialize);

//TODO remove
google.maps.geometry = null;

</script>

